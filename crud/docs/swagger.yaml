basePath: /
definitions:
  dto.AccessToken:
    properties:
      token:
        type: string
    type: object
  dto.CreateProductInput:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  dto.CreateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  entity.Product:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
host: localhost:8080
info:
  contact:
    email: email@email.com
    name: API Support
    url: http://swagger.io/support
  description: Product API with authentication
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go Expert CRUD API
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: Retrieves a list of products with pagination and sorting
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Limit of products per page for pagination
        in: query
        name: limit
        type: integer
      - description: Sort order
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            items:
              items:
                $ref: '#/definitions/entity.Product'
              type: array
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - jwt: []
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Adds a new product to the database
      parameters:
      - description: Create Product Input
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductInput'
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - jwt: []
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      description: Deletes a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - jwt: []
      summary: Delete a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Updates a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product object to update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/entity.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: Product not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - jwt: []
      summary: Update a product
      tags:
      - products
  /products/seed:
    post:
      consumes:
      - application/json
      description: Seeds the database with a specified number of products
      parameters:
      - description: 'Number of products to create (default: 25)'
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - jwt: []
      summary: Seed the database with products
      tags:
      - products
  /users/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: User credentials to login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccessToken'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Logs in a user
      tags:
      - users
  /users/seed:
    post:
      description: Seed application
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Seed the database with users
      tags:
      - users
  /users/signup:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User object that needs to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
schemes:
- http
securityDefinitions:
  jwt:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
